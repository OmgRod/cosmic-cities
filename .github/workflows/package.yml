name: Build LOVE2D Game

on:
  workflow_dispatch:
  push:
    branches:
      - "**"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: Windows 64-bit
            arch: win64
            os: windows-latest
            url: [https://github.com/love2d/love/releases/download/11.5/love-11.5-win64.zip](https://github.com/love2d/love/releases/download/11.5/love-11.5-win64.zip)

          - name: Windows 32-bit
            arch: win32
            os: windows-latest
            url: [https://github.com/love2d/love/releases/download/11.5/love-11.5-win32.zip](https://github.com/love2d/love/releases/download/11.5/love-11.5-win32.zip)

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Create game.love
        run: |
          # Use PowerShell's Compress-Archive to create game.zip (which is then renamed to game.love)
          # Ensure -Path * includes all necessary game files/folders at the root of the repo
          powershell -Command "Compress-Archive -Path * -DestinationPath game.zip"
          Rename-Item -Path game.zip -NewName game.love

      - name: Download LOVE2D Runtime
        run: |
          # Download the LOVE2D runtime zip and extract it
          curl -L -o love.zip "${{ matrix.config.url }}"
          powershell -Command "Expand-Archive -Path love.zip -DestinationPath love"

      - name: Download rcedit
        run: |
          # Create a tools directory and download rcedit.exe for icon manipulation
          mkdir tools
          curl -L -o tools/rcedit.exe [https://github.com/electron/rcedit/releases/download/v2.0.0/rcedit-x64.exe](https://github.com/electron/rcedit/releases/download/v2.0.0/rcedit-x64.exe)

      - name: Build Executable - concat love.exe and game.love
        shell: pwsh
        run: |
          # Find the specific LOVE2D runtime folder (e.g., love-11.5-win64)
          $loveRuntimeFolder = Get-ChildItem -Path "${{ github.workspace }}\love" -Directory | Where-Object { $_.Name -like "love-11.5-*" } | Select-Object -First 1
          if (-not $loveRuntimeFolder) {
              Write-Error "LOVE2D runtime folder not found."
              exit 1
          }
          $loveRuntimePath = $loveRuntimeFolder.FullName

          # Define paths for game.love, love.exe, and the final executable
          $gameLovePath = Join-Path "${{ github.workspace }}" "game.love"
          $loveExePath = Join-Path $loveRuntimePath "love.exe"
          $outputExePath = Join-Path $loveRuntimePath "CosmicCities.exe"

          # Copy game.love into the LOVE2D runtime directory
          Copy-Item -Path $gameLovePath -Destination $loveRuntimePath -Force

          # Change directory to the LOVE2D runtime folder to ensure 'copy /b' works correctly
          Set-Location $loveRuntimePath

          # Concatenate love.exe and game.love using cmd's binary copy
          # This creates CosmicCities.exe in the current directory ($loveRuntimePath)
          cmd /c "copy /b love.exe+game.love CosmicCities.exe"

          # Verify if the executable was created
          if (-not (Test-Path $outputExePath)) {
              Write-Error "Failed to create CosmicCities.exe at $outputExePath"
              exit 1
          }
          Write-Host "Successfully created CosmicCities.exe at $outputExePath"

      - name: Set Icon and Cleanup
        shell: pwsh
        run: |
          # Find the specific LOVE2D runtime folder again
          $loveRuntimeFolder = Get-ChildItem -Path "${{ github.workspace }}\love" -Directory | Where-Object { $_.Name -like "love-11.5-*" } | Select-Object -First 1
          if (-not $loveRuntimeFolder) {
              Write-Error "LOVE2D runtime folder not found for icon setting."
              exit 1
          }
          $loveRuntimePath = $loveRuntimeFolder.FullName

          # Define paths for the executable and icon
          $exePath = Join-Path $loveRuntimePath "CosmicCities.exe"
          # Ensure you have an 'icons' folder at the root of your repository with 'icon64.ico'
          $iconPath = "${{ github.workspace }}\icons\icon64.ico"

          # Set the icon for the executable using rcedit.exe
          # The rcedit.exe path is relative to the workspace root
          & "${{ github.workspace }}\tools\rcedit.exe" $exePath --set-icon $iconPath

          # Clean up unnecessary files from the build directory
          Set-Location $loveRuntimePath # Ensure we are in the correct directory for cleanup
          Remove-Item love.exe, game.love, readme.txt, changes.txt, game.ico, love.ico, lovec.exe -ErrorAction SilentlyContinue

      - name: Upload folder as artifact
        uses: actions/upload-artifact@v4
        with:
          name: CosmicCities-${{ matrix.config.arch }}
          path: love/love-11.5-*
